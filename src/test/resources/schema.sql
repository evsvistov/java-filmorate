--DROP TABLE IF EXISTS mpa;
CREATE TABLE IF NOT EXISTS mpa
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(5) NOT NULL UNIQUE CHECK (name IN ('G', 'PG', 'PG-13', 'R', 'NC-17'))
);

COMMENT ON TABLE mpa IS 'Таблица для хранения рейтингов Ассоциации кинокомпаний (MPA)';
COMMENT ON COLUMN mpa.id IS 'Уникальный идентификатор рейтинга';
COMMENT ON COLUMN mpa.name IS 'Рейтинг MPA';

--DROP TABLE IF EXISTS films;
CREATE TABLE IF NOT EXISTS films
(
    id           BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name         VARCHAR NOT NULL,
    description  VARCHAR(200),
    release_date DATE CHECK (release_date <= CURRENT_DATE AND release_date >= '1895-12-28'),
    duration     BIGINT CHECK (duration > 0),
    mpa_id       INT,
    FOREIGN KEY (mpa_id) REFERENCES mpa (id)
);

COMMENT ON TABLE films IS 'Таблица для хранения информации о фильмах';
COMMENT ON COLUMN films.id IS 'Уникальный идентификатор фильма';
COMMENT ON COLUMN films.name IS 'Название фильма, не может быть пустым';
COMMENT ON COLUMN films.description IS 'Описание фильма, максимальная длина — 200 символов';
COMMENT ON COLUMN films.release_date IS 'Дата релиза фильма, не может быть в будущем и не может быть раньше 28 декабря 1895 года';
COMMENT ON COLUMN films.duration IS 'Продолжительность фильма в минутах, должна быть положительным числом';
COMMENT ON COLUMN films.mpa_id IS 'Внешний ключ к таблице рейтингов MPA';

--DROP TABLE IF EXISTS genre;
CREATE TABLE IF NOT EXISTS genre
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR NOT NULL
);

COMMENT ON TABLE genre IS 'Таблица для хранения жанров фильмов';
COMMENT ON COLUMN genre.id IS 'Уникальный идентификатор жанра';
COMMENT ON COLUMN genre.name IS 'Название жанра';

--DROP TABLE IF NOT EXISTS film_genre;
CREATE TABLE IF NOT EXISTS film_genre
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id  BIGINT REFERENCES films (id) ON DELETE CASCADE,
    genre_id BIGINT REFERENCES genre (id) ON DELETE CASCADE
);

COMMENT ON TABLE film_genre IS 'Таблица для связывания фильмов с их жанрами';
COMMENT ON COLUMN film_genre.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN film_genre.film_id IS 'Идентификатор фильма, внешний ключ';
COMMENT ON COLUMN film_genre.genre_id IS 'Идентификатор жанра, внешний ключ';

--DROP TABLE IF EXISTS users;
CREATE TABLE IF NOT EXISTS users
(
    id       BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email    VARCHAR NOT NULL UNIQUE CHECK (email ~* '^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$'),
    login    VARCHAR NOT NULL CHECK (login !~* '\s'),
    name     VARCHAR,
    birthday DATE CHECK (birthday <= CURRENT_DATE)
);

COMMENT ON TABLE users IS 'Таблица для хранения информации о пользователях';
COMMENT ON COLUMN users.id IS 'Уникальный идентификатор пользователя';
COMMENT ON COLUMN users.email IS 'Электронная почта пользователя, должна быть корректной и содержать символ @, уникальное значение';
COMMENT ON COLUMN users.login IS 'Логин пользователя, не может быть пустым и содержать пробелы';
COMMENT ON COLUMN users.name IS 'Имя пользователя';
COMMENT ON COLUMN users.birthday IS 'Дата рождения пользователя, не может быть в будущем';

--DROP TABLE IF EXISTS friendship;
CREATE TABLE IF NOT EXISTS friendship
(
    id        BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id   BIGINT REFERENCES users (id) ON DELETE CASCADE,
    friend_id BIGINT REFERENCES users (id) ON DELETE CASCADE
);

COMMENT ON TABLE friendship IS 'Таблица для хранения информации о дружбе между пользователями';
COMMENT ON COLUMN friendship.user_id IS 'Идентификатор пользователя, который отправил запрос на дружбу, внешний ключ';
COMMENT ON COLUMN friendship.friend_id IS 'Идентификатор пользователя, которому отправлен запрос на дружбу, внешний ключ';

--ALTER TABLE friendship ADD CONSTRAINT friendship_pk UNIQUE (USER_ID, FRIEND_ID);

--CREATE INDEX idx_friendship_USER_ID on friendship (USER_ID);

CREATE TABLE IF NOT EXISTS film_likes
(
    id      BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    film_id BIGINT REFERENCES films (id) ON DELETE CASCADE,
    user_id BIGINT REFERENCES users (id) ON DELETE CASCADE
);
COMMENT ON TABLE film_likes IS 'Таблица для хранения информации о дружбе между пользователями';
COMMENT ON COLUMN film_likes.id IS 'Уникальный идентификатор';
COMMENT ON COLUMN film_likes.film_id IS 'Внешний ключ к таблице films';
COMMENT ON COLUMN film_likes.user_id IS 'Внешний ключ к таблице users';

--ALTER TABLE film_likes ADD CONSTRAINT film_likes_pk UNIQUE (FILM_ID, USER_ID);

--CREATE INDEX idx_film_likes_USER_ID on film_likes (FILM_ID);